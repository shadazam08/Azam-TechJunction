import React from "react";
import {
  Box,
  Link,
  List,
  ListItem,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Toolbar,
  Typography,
  styled,
  tableCellClasses,
} from "@mui/material";
import Grid from "@mui/material/Unstable_Grid2/Grid2";
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
import { gruvboxLight } from "react-syntax-highlighter/dist/esm/styles/prism";
import { Helmet } from "react-helmet";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { fa1, fa2, fa3 } from "@fortawesome/free-solid-svg-icons";

// tableCellClasses;
const StyledTableCell = styled(TableCell)(({ theme }) => ({
  [`&.${tableCellClasses.head}`]: {
    backgroundColor: "#4A148C",
    color: theme.palette.common.white,
    fontWeight: "bold",
    fontSize: "1.3em",
  },
  [`&.${tableCellClasses.body}`]: {
    fontSize: "1em",
  },
}));

const StyledTableRow = styled(TableRow)(({ theme }) => ({
  "&:nth-of-type(odd)": {
    backgroundColor: theme.palette.action.hover,
  },
  // hide last border
  "&:last-child td, &:last-child th": {
    border: 0,
  },
}));

function createData(name, StorageSize, Range) {
  return { name, StorageSize, Range };
}

const rows = [
  createData("SMALLSERIAL", "2 bytes", "1 to 32,767"),
  createData("SERIAL", "4 bytes", "1 to 2,147,483,647"),
  createData("BIGSERIAL", "8 bytes", "1 to 9,223,372,036,854,775,807"),
];

const Serial = () => {
  return (
    <>
      <Helmet>
        <title>SERIAL - Azam TechJunction</title>
      </Helmet>

      <Box component={"main"} className={"changeWidth"}>
        <Toolbar />
        <Box sx={{ p: 3 }}>
          <Typography variant={"h4"} className="text-gray-500">
            {`SERIAL to Create Auto-increment Column`}
          </Typography>
          <Typography align="justify" mt={2} sx={{ fontSize: "1.5em", fontWeight: "bold" }}>
            {`Introduction to PostgreSQL`} <code className="codes">SERIAL</code> {`pseudo-type`}
          </Typography>
          <Typography align={"justify"} mt={1}>
            {`In PostgreSQL, a sequence is a special kind of database object that generates a sequence of integers. A sequence is often used as the primary key column in a table.`}
          </Typography>
          <Typography align={"justify"} mt={1}>
            {`When`} <Link href={"/PostgreSQL/create-table"}>creating a new table</Link> {`, the sequence can be created through the`}{" "}
            <code className={"codes"}>SERIAL</code> {`pseudo-type as follows:`}
          </Typography>
          <Grid container spacing={2} sx={{ padding: "0.2em" }}>
            <Grid xs={12}>
              <Typography component={"pre"} sx={{ borderRadius: "10px" }}>
                <SyntaxHighlighter language="sql" style={gruvboxLight} customStyle={{ borderRadius: "10px" }}>
                  {`CREATE TABLE table_name(
    id SERIAL
);`}
                </SyntaxHighlighter>
              </Typography>
            </Grid>
          </Grid>
          <Typography align={"justify"} mt={2}>
            {`By assigning the`} <code className="codes">{`SERIAL`}</code> {`pseudo-type to the`} <code className="codes">{`id`}</code>{" "}
            {`column, PostgreSQL performs the following:`}
          </Typography>
          <List>
            <ListItem>
              <Typography align={"justify"}>
                <FontAwesomeIcon icon={fa1} size="sm" />
                {`)`} {`First, create a sequence object and set the next value generated by the sequence as the default value for the column.`}
              </Typography>
            </ListItem>
            <ListItem>
              <Typography align={"justify"}>
                <FontAwesomeIcon icon={fa2} size="sm" />
                {`)`} {`Second, add a`}{" "}
                <code className="codes">
                  <Link href={""}>{`NOT NULL`}</Link>
                </code>{" "}
                {`constraint to the`} <code className="codes">{`id`}</code>{" "}
                {`column because a sequence always generates an integer, which is a non-null value.`}
              </Typography>
            </ListItem>
            <ListItem>
              <Typography align={"justify"}>
                <FontAwesomeIcon icon={fa3} size="sm" />
                {`)`} {`Third, assign the owner of the sequence to the`} <code className="codes">{`id`}</code>{" "}
                {`column; as a result, the sequence object is deleted when the`} <code className="codes">{`id`}</code> {`column or table is dropped`}
              </Typography>
            </ListItem>
          </List>
          <Typography align={"justify"} mt={2}>
            {`Behind the scenes, the following statement:`}
          </Typography>
          <Grid container spacing={2} sx={{ padding: "0.2em" }}>
            <Grid xs={12}>
              <Typography component={"pre"} sx={{ borderRadius: "10px" }}>
                <SyntaxHighlighter language="sql" style={gruvboxLight} customStyle={{ borderRadius: "10px" }}>
                  {`CREATE TABLE table_name(
    id SERIAL
);`}
                </SyntaxHighlighter>
                <Typography align={"justify"} mt={2}>
                  {`is equivalent to the following statements:`}
                </Typography>
                <SyntaxHighlighter language="sql" style={gruvboxLight} customStyle={{ borderRadius: "10px" }}>
                  {`CREATE SEQUENCE table_name_id_seq;

CREATE TABLE table_name (
    id integer NOT NULL DEFAULT nextval('table_name_id_seq')
);

ALTER SEQUENCE table_name_id_seq
OWNED BY table_name.id;`}
                </SyntaxHighlighter>
              </Typography>
            </Grid>
          </Grid>
          <Typography align={"justify"} mt={2}>
            {`PostgreSQL provides three serial pseudo-types`} <code className="codes">{`SMALLSERIAL`}</code>
            {`,`} <code className="codes">{`SERIAL`}</code>
            {`, and`} <code className="codes">{`BIGSERIAL`}</code> {`with the following characteristics:`}
          </Typography>
          <TableContainer component={Paper} sx={{ marginTop: "1.5em" }}>
            <Table sx={{ minWidth: 300 }} aria-label="pseudo-types tables">
              <TableHead>
                <TableRow>
                  <StyledTableCell>Name</StyledTableCell>
                  <StyledTableCell align="right">Storage Size</StyledTableCell>
                  <StyledTableCell align="right">Range</StyledTableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {rows.map((row) => (
                  <StyledTableRow key={row.name} sx={{ "&:last-child td, &:last-child th": { border: 0 } }}>
                    <StyledTableCell component="th" scope="row">
                      {row.name}
                    </StyledTableCell>
                    <StyledTableCell align="right">{row.StorageSize}</StyledTableCell>
                    <StyledTableCell align="right">{row.Range}</StyledTableCell>
                  </StyledTableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
          <Typography align="justify" mt={2} sx={{ fontSize: "1.5em", fontWeight: "bold" }}>
            {`PostgreSQL`} <code className="codes">SERIAL</code> {`examples`}
          </Typography>
          <Typography align={"justify"} mt={2}>
            {`Letâ€™s take some examples of using the SERIAL columns.`}
          </Typography>
          <List>
            <ListItem>
              <Typography component={"span"} align={"justify"} mt={2}>
                <Typography component={"span"} align={"justify"} sx={{ fontSize: "1.5em", fontWeight: "bold" }}>
                  <FontAwesomeIcon icon={fa1} />
                  {`)`} {`Basic PostgreSQL`} <code className="codes">{`SERIAL`}</code> {`example`}
                </Typography>
                <Typography align={"justify"} mt={1}>
                  {`It is important to note that the`} <code className="codes">{`SERIAL`}</code>{" "}
                  {`does not implicitly create an index on the column or make the column the primary key column. However, this can be done easily by specifying the`}{" "}
                  <code className="codes">{`PRIMARY KEY`}</code> {`constraint for the`} <code className="codes">{`SERIAL`}</code> {`column.`}
                </Typography>
                <Typography align={"justify"} mt={1}>
                  {`The following statement creates the`} <code className="codes">{`fruits`}</code> {`table with the `}{" "}
                  <code className="codes">{`id`}</code> {`column as the`} <code className="codes">{`SERIAL`}</code> {`column.`}
                </Typography>
                <Grid container spacing={2} sx={{ padding: "0.2em" }}>
                  <Grid xs={12}>
                    <Typography component={"pre"} sx={{ borderRadius: "10px" }}>
                      <SyntaxHighlighter language="sql" style={gruvboxLight} customStyle={{ borderRadius: "10px" }}>
                        {`CREATE TABLE fruits(
   id SERIAL PRIMARY KEY,
   name VARCHAR NOT NULL
);`}
                      </SyntaxHighlighter>
                    </Typography>
                  </Grid>
                </Grid>
                <Typography align={"justify"} mt={2}>
                  {`To assign a default value to a serial column when inserting a row into the table, you ignore the column name or use the`}{" "}
                  <code className="codes">{`DEFAULT`}</code> {`keyword in the`} <code className="codes">{`INSERT`}</code> {`statement. For example:`}
                </Typography>
                <Grid container spacing={2} sx={{ padding: "0.2em" }}>
                  <Grid xs={12}>
                    <Typography component={"pre"} sx={{ borderRadius: "10px" }}>
                      <SyntaxHighlighter language="sql" style={gruvboxLight} customStyle={{ borderRadius: "10px" }}>
                        {`INSERT INTO fruits(name) 
VALUES('Orange');`}
                      </SyntaxHighlighter>
                      <Typography align={"justify"} mt={1}>{`Or`}</Typography>
                      <SyntaxHighlighter language="sql" style={gruvboxLight} customStyle={{ borderRadius: "10px" }}>
                        {`INSERT INTO fruits(id,name) 
VALUES(DEFAULT,'Apple');`}
                      </SyntaxHighlighter>
                    </Typography>
                  </Grid>
                </Grid>
                <Typography align={"justify"} mt={2}>
                  {`PostgreSQL inserted two rows into the`} <code className="codes">{`fruits`}</code> {`table with the values for the`}{" "}
                  <code className="codes">{`id`}</code> {`column are 1 and 2.`}
                </Typography>
                <Grid container spacing={2} sx={{ padding: "0.2em" }}>
                  <Grid xs={12}>
                    <Typography component={"pre"} sx={{ borderRadius: "10px" }}>
                      <SyntaxHighlighter language="sql" style={gruvboxLight} customStyle={{ borderRadius: "10px" }}>
                        {`SELECT * FROM fruits;`}
                      </SyntaxHighlighter>
                      {/* <Typography align={"justify"} mt={1}>{`Or`}</Typography> */}
                      <SyntaxHighlighter language="sql" style={gruvboxLight} customStyle={{ borderRadius: "10px" }}>
                        {` id |  name
----+--------
  1 | Orange
  2 | Apple
(2 rows)`}
                      </SyntaxHighlighter>
                    </Typography>
                  </Grid>
                </Grid>
              </Typography>
            </ListItem>
            <ListItem>
              <Typography component={"span"} align={"justify"} mt={2}>
                <Typography component={"span"} align={"justify"} sx={{ fontSize: "1.5em", fontWeight: "bold" }}>
                  <FontAwesomeIcon icon={fa2} />
                  {`)`} {`Getting the sequence name`}
                </Typography>
                <Typography align={"justify"} mt={1}>
                  {`To get the sequence name of a`} <code className="codes">{`SERIAL`}</code> {`column in a table, you use the`}{" "}
                  <code className="codes">{`pg_get_serial_sequence()`}</code> {`function as follows:`}
                </Typography>
                <Grid container spacing={2} sx={{ padding: "0.2em" }}>
                  <Grid xs={12}>
                    <Typography component={"pre"} sx={{ borderRadius: "10px" }}>
                      <SyntaxHighlighter language="sql" style={gruvboxLight} customStyle={{ borderRadius: "10px" }}>
                        {`pg_get_serial_sequence(
'table_name','column_name'
)`}
                      </SyntaxHighlighter>
                    </Typography>
                  </Grid>
                </Grid>
                <Typography align={"justify"} mt={2}>
                  {`You can pass a sequence name to the`} <code className="codes">{`currval()`}</code>{" "}
                  {`function to get the recent value generated by the sequence. For example, the following statement returns the recent value generated by the`}{" "}
                  <code className="codes">{`fruits_id_seq`}</code> {`object:`}
                </Typography>
              </Typography>
            </ListItem>
          </List>
        </Box>
      </Box>
    </>
  );
};

export default Serial;
